Archivo inicial : 

index.js (CRA)
main.jsx (VITE)


JSX : 

function Foo(){}


foo()  === <Foo/>   

foo()  === <Foo></Foo>



- Bloques estructurales de la pagina
- Bloques reutilizables
- Patrones de diseño :

    - Container / Presentational - Smart / Dumb
    - State uplifiting - 
    - Provider Pattern 


https://react-bootstrap.github.io/

btn btn-primary btn-sm

<Button variant="primary" size="sm">Primary</Button>





https://tailwindcss.com/

bg-red-500 text-white font-bold py-2 px-4 rounded



https://ant.design/docs/react/introduce/

<Button type="primary" size="small">Primary</Button>




https://mui.com/material-ui/


https://chakra-ui.com/


https://bulma.io/



PROPS : Los parametros de un componente




REACT ENVIRONMENT

1) Instalar NodeJS (NVM)
2) Tener NPM actualizado (ya viene con NodeJS: npm i -g npm)
3) Instalar create-react-app (se encuentra en NPM, es un paquete de NPM y se installa con : npm i -g create-react-app)
4) Abro una linea de comandos en dondew quiero crear mi proyecto y ejecuto : create-react-app "nombre_del_proyecto" ("nombre_del_proyecto" es el nombre de la carpeta que se va a crear con todos los archivos dentro)





PWA : Progressive Web App


/* 
const btn = document.querySelector('button');
btn.addEventListener('click',miCallback)
*/

function Main(props) {

    const handleClick = () => {
        console.log('click')
        //return undefined
    }

    //const resultado = handleClick()

    return (
        <main className="p-2 grow">
            {props.children}
            <button onClick={handleClick}>click</button>
            {/* <button onClick={()=>{}}>click</button> */}
           {/*  <button onClick={handleClick()}>click</button> */}
        </main>
    )
}

export default Main




HOOK : Son funciones que comienzan con "use" y que le dan a un componente una nueva funcionalidad. Siempre se ejecutan, dentro del componente y nunca en un condicional/bucle

- useState : es un hook que me permite crear una variable reactiva dentro de un componente funcional. El hook siempre retorna un array con dos cosas dentro : 


- useEffect
- useRef
- useContext
- useReducer
- useMemo
- useCallback
- useLayoutEffect
- useImperativeHandle
- useDebugValue





OLD MAIN : 

import { useState } from "react"

function Contador() {
    //Valores

    //Transformacion de variable normal en reactiva : Obtener un estado
    //let contador = 0 //variable normal
    let [contador,setContador] = useState(0) //variable de estado
    let [open,setOpen] = useState(false) //variable de estado

   /*  let resultadoDelHook = useState("Hola")
    console.log(resultadoDelHook)
    console.log(typeof resultadoDelHook)
    console.log(Array.isArray(resultadoDelHook)) */

    //Acciones
    const handleClick = () => {
        //contador = contador + 1
        //contador += 1
        //contador++

        //setContador(contador++)
        //setContador(contador = contador + 1)

        setContador(contador + 1)
        console.log(contador)
    }

    //Vista
    return (
        <main className="p-2 grow">
            <p>Contador : {contador}</p>
            <button onClick={handleClick}>click</button>
        </main>
    )
}

export default Contador


    //DRY - Don't Repeat Yourself
    //Kiss - Keep It Simple Stupid
    //YAGNI - You Aren't Gonna Need It
    


import { useState } from "react"



function Main() {

    //Estados
    const [dark, setDark] = useState(false)
    const [nombreReactivo, setNombreReactivo] = useState("Horacio")
    let nombreNoReactivo = "Juan"


    //Accion
    const toggleDark = () => {
        setShow(!show)
    }

    const cambiarValores = () => {
        console.log("cambiar valores")

        nombreNoReactivo = "pedro"

        //nombreReactivo = "pedro" //NOOOOO!!! un estado no se puede reasignar

        setNombreReactivo("pedro")

        //console.log(nombreNoReactivo)
        //console.log(nombreReactivo) //Este no va a dar porque el cambio de estado es asincronico
    }

    //Vista
    //if(dark) { return <main className="p-2 grow dark"> } else { return <main className="p-2 grow light"> }
    return (
        <main className={dark ? "p-2 grow dark" : "p-2 grow light"}>
            <p>{nombreNoReactivo}</p>
            <p>{nombreReactivo}</p>
            <button onClick={cambiarValores}>cambiar valores</button>
            <button onClick={toggleDark}>toggle dark/light</button>
        </main>
    )

    //Sentencia vs expresion
    //expresiones ternarios : condicion ? valor si es true : valor si es false
    //if(condicion) { return valor si es true } else { return valor si es false }
    /* const resultado = if(true){
        return 1
    }else {
        return 2
    } */

    //const resultado = true ? 1 : 2

    /* return (
        <main className="p-2 grow">
            <p>{nombreNoReactivo}</p>
            <p>{nombreReactivo}</p>
            <button onClick={cambiarValores}>cambiar valores</button>
            <button onClick={toggleDark}>toggle dark/light</button>
        </main>
    ) */


    /* if (dark) {
        return (
            <main className="p-2 grow dark">
                <p>{nombreNoReactivo}</p>
                <p>{nombreReactivo}</p>
                <button onClick={cambiarValores}>cambiar valores</button>
                <button onClick={toggleDark}>toggle dark/light</button>
            </main>
        )
    } else {
        return (
            <main className="p-2 grow light">
                <p>{nombreNoReactivo}</p>
                <p>{nombreReactivo}</p>
                <button onClick={cambiarValores}>cambiar valores</button>
                <button onClick={toggleDark}>toggle dark/light</button>
            </main>
        )
    } */
}

export default Main


PATRON DE DISEÑO CONTAINER/PRESENTACIONAL

Container : Es un componente que se encarga de la logica fuerte (logica de negocio) , almacenamiento de informacion, etc. y de pasarle los datos al componente presentacional