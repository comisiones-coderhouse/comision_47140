Archivo inicial : 

index.js (CRA)
main.jsx (VITE)


JSX : 

function Foo(){}


foo()  === <Foo/>   

foo()  === <Foo></Foo>



- Bloques estructurales de la pagina
- Bloques reutilizables
- Patrones de diseño :

    - Container / Presentational - Smart / Dumb
    - State uplifiting - 
    - Provider Pattern 


https://react-bootstrap.github.io/

btn btn-primary btn-sm

<Button variant="primary" size="sm">Primary</Button>





https://tailwindcss.com/

bg-red-500 text-white font-bold py-2 px-4 rounded



https://ant.design/docs/react/introduce/

<Button type="primary" size="small">Primary</Button>




https://mui.com/material-ui/


https://chakra-ui.com/


https://bulma.io/



PROPS : Los parametros de un componente




REACT ENVIRONMENT

1) Instalar NodeJS (NVM)
2) Tener NPM actualizado (ya viene con NodeJS: npm i -g npm)
3) Instalar create-react-app (se encuentra en NPM, es un paquete de NPM y se installa con : npm i -g create-react-app)
4) Abro una linea de comandos en dondew quiero crear mi proyecto y ejecuto : create-react-app "nombre_del_proyecto" ("nombre_del_proyecto" es el nombre de la carpeta que se va a crear con todos los archivos dentro)





PWA : Progressive Web App


/* 
const btn = document.querySelector('button');
btn.addEventListener('click',miCallback)
*/

function Main(props) {

    const handleClick = () => {
        console.log('click')
        //return undefined
    }

    //const resultado = handleClick()

    return (
        <main className="p-2 grow">
            {props.children}
            <button onClick={handleClick}>click</button>
            {/* <button onClick={()=>{}}>click</button> */}
           {/*  <button onClick={handleClick()}>click</button> */}
        </main>
    )
}

export default Main




HOOK : Son funciones que comienzan con "use" y que le dan a un componente una nueva funcionalidad. Siempre se ejecutan, dentro del componente y nunca en un condicional/bucle

- useState : es un hook que me permite crear una variable reactiva dentro de un componente funcional. El hook siempre retorna un array con dos cosas dentro : 


- useEffect
- useRef
- useContext
- useReducer
- useMemo
- useCallback
- useLayoutEffect
- useImperativeHandle
- useDebugValue





OLD MAIN : 

import { useState } from "react"

function Contador() {
    //Valores

    //Transformacion de variable normal en reactiva : Obtener un estado
    //let contador = 0 //variable normal
    let [contador,setContador] = useState(0) //variable de estado
    let [open,setOpen] = useState(false) //variable de estado

   /*  let resultadoDelHook = useState("Hola")
    console.log(resultadoDelHook)
    console.log(typeof resultadoDelHook)
    console.log(Array.isArray(resultadoDelHook)) */

    //Acciones
    const handleClick = () => {
        //contador = contador + 1
        //contador += 1
        //contador++

        //setContador(contador++)
        //setContador(contador = contador + 1)

        setContador(contador + 1)
        console.log(contador)
    }

    //Vista
    return (
        <main className="p-2 grow">
            <p>Contador : {contador}</p>
            <button onClick={handleClick}>click</button>
        </main>
    )
}

export default Contador


    //DRY - Don't Repeat Yourself
    //Kiss - Keep It Simple Stupid
    //YAGNI - You Aren't Gonna Need It
    


import { useState } from "react"



function Main() {

    //Estados
    const [dark, setDark] = useState(false)
    const [nombreReactivo, setNombreReactivo] = useState("Horacio")
    let nombreNoReactivo = "Juan"


    //Accion
    const toggleDark = () => {
        setShow(!show)
    }

    const cambiarValores = () => {
        console.log("cambiar valores")

        nombreNoReactivo = "pedro"

        //nombreReactivo = "pedro" //NOOOOO!!! un estado no se puede reasignar

        setNombreReactivo("pedro")

        //console.log(nombreNoReactivo)
        //console.log(nombreReactivo) //Este no va a dar porque el cambio de estado es asincronico
    }

    //Vista
    //if(dark) { return <main className="p-2 grow dark"> } else { return <main className="p-2 grow light"> }
    return (
        <main className={dark ? "p-2 grow dark" : "p-2 grow light"}>
            <p>{nombreNoReactivo}</p>
            <p>{nombreReactivo}</p>
            <button onClick={cambiarValores}>cambiar valores</button>
            <button onClick={toggleDark}>toggle dark/light</button>
        </main>
    )

    //Sentencia vs expresion
    //expresiones ternarios : condicion ? valor si es true : valor si es false
    //if(condicion) { return valor si es true } else { return valor si es false }
    /* const resultado = if(true){
        return 1
    }else {
        return 2
    } */

    //const resultado = true ? 1 : 2

    /* return (
        <main className="p-2 grow">
            <p>{nombreNoReactivo}</p>
            <p>{nombreReactivo}</p>
            <button onClick={cambiarValores}>cambiar valores</button>
            <button onClick={toggleDark}>toggle dark/light</button>
        </main>
    ) */


    /* if (dark) {
        return (
            <main className="p-2 grow dark">
                <p>{nombreNoReactivo}</p>
                <p>{nombreReactivo}</p>
                <button onClick={cambiarValores}>cambiar valores</button>
                <button onClick={toggleDark}>toggle dark/light</button>
            </main>
        )
    } else {
        return (
            <main className="p-2 grow light">
                <p>{nombreNoReactivo}</p>
                <p>{nombreReactivo}</p>
                <button onClick={cambiarValores}>cambiar valores</button>
                <button onClick={toggleDark}>toggle dark/light</button>
            </main>
        )
    } */
}

export default Main


PATRON DE DISEÑO CONTAINER/PRESENTACIONAL

Container : Es un componente que se encarga de la logica fuerte (logica de negocio) , almacenamiento de informacion, etc. y de pasarle los datos al componente presentacional

Presentacional : Es un componente que se encarga de la vista, de mostrar la informacion que le llega del componente container




const arr = [1,2,3]

para recorrer y ya
arr.forEach((item,i)=>{ return ? })

para recorrer y modificar
const resultado = arr.map((item,i)=>{ 
    return 1
   //return undefined 
})

para recorrer y filtrar
const resultado = arr.filter((item,i)=>{})

para recorrer y encontrar
const resultado = arr.find((item,i)=>{})












TODOS: 

- PASAR funcion como prop





const foo = function(a){ return a}

const foo = (a) => { return a}

const foo = (a) => a

const foo = a => a

const foo = a => (a)




        /*  setTimeout(() => {
             
             console.log("Termino el pedido a la api")
             
             let data = [{ id: 1, nombre: "Horacio" }, { id: 2, nombre: "Juan" }, { id: 3, nombre: "Pedro" }]
 
             setData(data)
 
         }, 3000)  */



src/
    ui/
        layout/
            Header.js
            Footer.js
            Main.js
        pages/
            Home.js
            About.js
            Contact.js
        widgets/
            Counter.js
            Button.js
            Nav.js
    api/
        context/
        redux/
        db.js

    

Props children
render props
HoC : High Order Component


Context : Provider - Consumer





HTTP y FETCH

HTTP : Es un protocolo de comunicacion entre cliente y servidor. Es el protocolo que se usa para comunicarse con el servidor. Es el protocolo que se usa para hacer pedidos a la API


REQUEST

- METODO/VERBOS : GET, POST, PUT, DELETE, PATCH, OPTIONS, HEAD
- URL/IP : http://google.com/search?q=react
- VERSION : HTTP/1.1
- HEADERS : 

    - Accept : text/html, application/json, application/xml, application/pdf, image/png, image/jpeg, image/gif, etc.
    - Content-Type : application/json, application/xml, application/pdf, image/png, image/jpeg, image/gif, etc.
    - Authorization : Bearer token


- BODY : Es informacion cruda que le podemos enviar al servidor (solo disponible en POST, PUT, DELETE, PATCH)






RESPONSE

- VERSION : HTTP/1.1
- STATUS CODE : 1xx (Informacion), 2xx (OK), 3xx (Redireccion), 4xx (Error del cliente), 5xx (Error del servidor)
- STATUS MESSAGE : OK, NOT FOUND, INTERNAL SERVER ERROR
- HEADERS : 

    - Content-Type : text/html, application/json, application/xml, application/pdf, image/png, image/jpeg, image/gif, etc.
    - Authorization : Bearer token
    
- BODY : Es informacion cruda que nos envia el 




//Promesa creada a mano
/* const promesa_a_mano = new Promise((res, rej) => { })
promesa_a_mano.then((respuesta) => { console.log(respuesta) })
promesa_a_mano.catch(() => { })


//Promesa con fetch
const pedido = fetch('https://fakestoreapi.com/products')

|pedido.then((respuesta) => {
  const la_respuesta_parseada = respuesta.json()
  return la_respuesta_parseada
})

  .then((respuesta_parseada) => {
    console.log(respuesta_parseada)
  })

pedido.catch((error) => { console.log(error) })


console.log(pedido)
console.log(promesa_a_mano)



 */




//styled components
// import styled from 'styled-components'
/* 

const Header = styled.header`
    background-color: #333;
    color: #fff;
    padding: 10px;
    display: flex;
    justify-content: space-between;
    align-items: center;
`

*/



import { useParams } from "react-router-dom"


Link , NavLink : Son componentes de la libreria que dan una etiqueta <a>
Routes : Es un componente que agrupa las rutas (Route) 
Route : Es un componente que se encarga de renderizar un componente cuando la ruta coincide con la url actual del navegador




State Uplifting : Es un patron de diseño que consiste pasarle informacion de un componente hijo a un componente padre. Se usa cuando un componente hijo necesita que un componente padre haga algo con su informacion. Para implementarlo se usan callbacks, eventos y props. 

1) Crear un callback(una funcion) en el componente padre
2) Se la paso al componente hijo (por props)
3) Recibo ese callback en el hijo por props
4) Ejecuto ese callback en un evento del hijo





import CarritoHijo from "./CarritoHijo"


/* 
const btn = document.querySelector('button')
btn.addEventListener('click', () => {})
btn.addEventListener('click', miCallback)
btn.addEventListener('click', miCallback())
btn.addEventListener('click', ()=>miCallback())
*/


function Carrito() {


    const handleClick = (e) => {
        console.log(e)
        e.preventDefault()
        e.stopPropagation()
        //e == Event Object == Representa el evento que se acaba de ejecutar
        //e.target
        //e.preventDefault
        //e.stopPropagation
        //const btn = document.querySelector('button')
        //console.log(e.target)
    }

    const handleChange = (e) => { 
        //console.log(e)
        //e.preventDefault()
        console.log(e.target)
    }


    const handlePropagation = (e) => {
        console.log('handlePropagation')
        console.log(e.target)
    }

    return (
        <div onClick={handlePropagation}>
            {/* <button onClick={() => { }}>click</button> */}
            {/* <button onClick={handleClick()}>click</button> */}
            {/* <button onClick={() => { handleClick() }}>click</button> */}
            {/* <button onClick={handleClick}>click</button> */}
            <a href="https://google.com" onClick={handleClick}>ir a google</a>
            <input className="border-black border" type="text" onKeyDown={handleChange} />
            <CarritoHijo />
        </div>
    )
}

export default Carrito




Context API : Es una API de React que nos permite crear un contexto global para nuestra aplicacion. Es un patron de diseño que nos permite pasar informacion de un componente padre a un componente hijo sin tener que pasar por todos los componentes intermedios. Se usa cuando un componente hijo necesita informacion de un componente padre pero no es un componente directo. Para implementarlo se usan los componentes Provider que sale del contexto.


IMPLEMENTACION PRACTICA : 

1) Crear un componente
2) Incluirlo en alguna parte de la aplicacion con children
3) Crear un contexto 
4) Sacarle el Provider de adentro
5) Usar el Provider en el componente del paso 1
6) Pasarle un valor al Provider con el prop value

IMPLEMENTACION LECTURA DE CONTEXTO : 

1) Importar el hook useContext
2) Importar el contexto (paso 3 de la implementacion practica)
3) ???
4) Profit



Firebase : Es la plataforma
Firestore : Es la base de datos

primera parte : en la pagina web
    - crear una cuenta
    - crear un proyecto dentro de la cuenta
    - crear una base de datos dentro del proyecto
    - llenar la base de datos con datos
    - obtener permisos de acceso para el codigo

segunda parte : en el codigo
    - establecer una conexion con la base de datos usando los permisos del ultimo punto de la primera parte
    - ???
    - profit



CRUD : Create, Read, Update, Delete


BASE DE DATOS : 
 es un programa de tipo servidor

+ lenguajes : 
MySQL
MongoDB


Categorias de dbs : 

- relacionales - SQL (SQL, MySQL, Postgres, Oracle,MariaDB , etc.)
    - db
    - tablas ( como carpetas con validaciones )
    - registros ( como filas en un excel )

- no relacionales - NoSQL (NotOnly , MongoDB, Firebase, Cassandra, etc. MariaDB)
    - db
    - collection ( como carpetas sin validaciones )
    - documentos ( como archivos json )

- grafos 
- vectoriales